datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  donations     Donation[]
  foodListings  FoodListing[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Donation {
  id                String   @id @default(cuid())
  amount            Decimal
  currency          String   @default("INR")
  paymentId         String   @unique
  orderId           String   @unique
  signature         String?
  status            String   @default("PENDING")
  donorEmail        String
  donorName         String?
  razorpayCreatedAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  @@index([donorEmail])
  @@index([status])
  @@index([createdAt])
}

model FoodListing {
  id              String    @id @default(cuid())
  name            String
  description     String
  quantity        Int
  expirationDate  DateTime
  imageData       Bytes
  imageMimeType   String
  status          String   @default("REQUESTED")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  addressId       String
  address         Address   @relation(fields: [addressId], references: [id])

  @@index([name])
  @@index([expirationDate])
  @@index([createdAt])
}

model Address {
  id          String       @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  landmark    String?
  foodListings FoodListing[]

  @@index([city])
  @@index([state])
  @@index([postalCode])
}